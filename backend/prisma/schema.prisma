// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id           Int             @id @default(autoincrement())
  name         String          @db.VarChar(191)
  email        String          @unique @db.VarChar(191)
  password     String
  LandOwners   LandOwners[]
  UploadedCsvs UploadedCsvs[]   // Add this line for the relation with UploadedCsvs
  CsvsResults  CsvsResults[]    // Add this line for the relation with CsvsResults
  created_at   DateTime         @default(now())
  updated_at   DateTime         @default(now())
}

model LandOwners {
  id        Int      @id @default(autoincrement())
  name      String?
  address   String?
  cityState String?
  email     String?
  phone     String?
  userId    Int
  user      Users    @relation(fields: [userId], references: [id])
}

model UploadedCsvs {
  id         Int      @id @default(autoincrement())
  queue_id   Int
  status     String
  created_at DateTime @default(now()) // Added default for created_at
  userId     Int
  message    String
  user       Users     @relation(fields: [userId], references: [id])

  @@map("uploaded_csvs")
}

model CsvsResults {
  id               Int      @id @default(autoincrement())
  created_at       DateTime @default(now())
  pending          Boolean  @default(false)
  download_url     String? 
  rows_uploaded    Int?     
  credits_deducted Int?     
  userId           Int
  user             Users    @relation(fields: [userId], references: [id])
  results          Json?
}

